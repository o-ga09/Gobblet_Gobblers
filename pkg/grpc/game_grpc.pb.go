// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: game.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	// サービスが持つメソッドの定義
	Greetserver(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	AddRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomInfo, error)
	GetRoomInfo(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomInfo, error)
	GetRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomList, error)
	//Bidirectional Chat
	TicTacToeGame(ctx context.Context, opts ...grpc.CallOption) (GameService_TicTacToeGameClient, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Greetserver(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/Greetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomInfo, error) {
	out := new(RoomInfo)
	err := c.cc.Invoke(ctx, "/game.GameService/AddRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetRoomInfo(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomInfo, error) {
	out := new(RoomInfo)
	err := c.cc.Invoke(ctx, "/game.GameService/GetRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomList, error) {
	out := new(RoomList)
	err := c.cc.Invoke(ctx, "/game.GameService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) TicTacToeGame(ctx context.Context, opts ...grpc.CallOption) (GameService_TicTacToeGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], "/game.GameService/TicTacToeGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceTicTacToeGameClient{stream}
	return x, nil
}

type GameService_TicTacToeGameClient interface {
	Send(*GameRequest) error
	Recv() (*GameResponse, error)
	grpc.ClientStream
}

type gameServiceTicTacToeGameClient struct {
	grpc.ClientStream
}

func (x *gameServiceTicTacToeGameClient) Send(m *GameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceTicTacToeGameClient) Recv() (*GameResponse, error) {
	m := new(GameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	// サービスが持つメソッドの定義
	Greetserver(context.Context, *GreetRequest) (*GreetResponse, error)
	AddRoom(context.Context, *RoomRequest) (*RoomInfo, error)
	GetRoomInfo(context.Context, *RoomRequest) (*RoomInfo, error)
	GetRooms(context.Context, *emptypb.Empty) (*RoomList, error)
	//Bidirectional Chat
	TicTacToeGame(GameService_TicTacToeGameServer) error
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) Greetserver(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greetserver not implemented")
}
func (UnimplementedGameServiceServer) AddRoom(context.Context, *RoomRequest) (*RoomInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoom not implemented")
}
func (UnimplementedGameServiceServer) GetRoomInfo(context.Context, *RoomRequest) (*RoomInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (UnimplementedGameServiceServer) GetRooms(context.Context, *emptypb.Empty) (*RoomList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedGameServiceServer) TicTacToeGame(GameService_TicTacToeGameServer) error {
	return status.Errorf(codes.Unimplemented, "method TicTacToeGame not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_Greetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Greetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/Greetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Greetserver(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/AddRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddRoom(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetRoomInfo(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetRooms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_TicTacToeGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).TicTacToeGame(&gameServiceTicTacToeGameServer{stream})
}

type GameService_TicTacToeGameServer interface {
	Send(*GameResponse) error
	Recv() (*GameRequest, error)
	grpc.ServerStream
}

type gameServiceTicTacToeGameServer struct {
	grpc.ServerStream
}

func (x *gameServiceTicTacToeGameServer) Send(m *GameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceTicTacToeGameServer) Recv() (*GameRequest, error) {
	m := new(GameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greetserver",
			Handler:    _GameService_Greetserver_Handler,
		},
		{
			MethodName: "AddRoom",
			Handler:    _GameService_AddRoom_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _GameService_GetRoomInfo_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _GameService_GetRooms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TicTacToeGame",
			Handler:       _GameService_TicTacToeGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}
