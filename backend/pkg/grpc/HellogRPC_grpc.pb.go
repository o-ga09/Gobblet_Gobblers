// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: HellogRPC.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HellogRPCServiceClient is the client API for HellogRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HellogRPCServiceClient interface {
	// サービスが持つメソッドの定義
	Greetserver(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type hellogRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHellogRPCServiceClient(cc grpc.ClientConnInterface) HellogRPCServiceClient {
	return &hellogRPCServiceClient{cc}
}

func (c *hellogRPCServiceClient) Greetserver(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/HellogRPC.HellogRPCService/Greetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HellogRPCServiceServer is the server API for HellogRPCService service.
// All implementations must embed UnimplementedHellogRPCServiceServer
// for forward compatibility
type HellogRPCServiceServer interface {
	// サービスが持つメソッドの定義
	Greetserver(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedHellogRPCServiceServer()
}

// UnimplementedHellogRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHellogRPCServiceServer struct {
}

func (UnimplementedHellogRPCServiceServer) Greetserver(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greetserver not implemented")
}
func (UnimplementedHellogRPCServiceServer) mustEmbedUnimplementedHellogRPCServiceServer() {}

// UnsafeHellogRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HellogRPCServiceServer will
// result in compilation errors.
type UnsafeHellogRPCServiceServer interface {
	mustEmbedUnimplementedHellogRPCServiceServer()
}

func RegisterHellogRPCServiceServer(s grpc.ServiceRegistrar, srv HellogRPCServiceServer) {
	s.RegisterService(&HellogRPCService_ServiceDesc, srv)
}

func _HellogRPCService_Greetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellogRPCServiceServer).Greetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HellogRPC.HellogRPCService/Greetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellogRPCServiceServer).Greetserver(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HellogRPCService_ServiceDesc is the grpc.ServiceDesc for HellogRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HellogRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HellogRPC.HellogRPCService",
	HandlerType: (*HellogRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greetserver",
			Handler:    _HellogRPCService_Greetserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HellogRPC.proto",
}
